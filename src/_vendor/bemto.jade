//- bemto
//- Copyright(c) 2012 Roman Komarov <kizu@kizu.ru>
//- MIT Licensed

//- Settings
- var bemto_settings_prefix = ''
- var bemto_settings_element = '__'
- var bemto_settings_modifier = '_'
- var bemto_settings_default_tag = 'div'

//- Tag mixin, used for tweaking what tag we are throwing and do we need to wrap anything here
mixin bemto_tag(tag)
  //- rewriting tag name on different contexts
  - var newTag = tag || bemto_settings_default_tag;
  - var contextIndex = bemto_chain_contexts.length;

  //- Checks for contexts if no tag given
  if !tag
    if bemto_chain_contexts[contextIndex-1] === 'inline'
      - newTag = 'span';
    else if bemto_chain_contexts[contextIndex-1] === 'list'
      - newTag = 'li';

  //- Attributes context checks
  if attributes.href
    - newTag = 'a';
  if attributes.for
    - newTag = 'label';
  else if attributes.src
    - newTag = 'img';

  //- Contextual wrappers
  if bemto_chain_contexts[contextIndex-1] === 'list' && newTag !== 'li'
    | <li>
  else if bemto_chain_contexts[contextIndex-1] !== 'list' && bemto_chain_contexts[contextIndex-1] !== 'pseudo-list' && newTag === 'li'
    | <ul>
    - bemto_chain_contexts[bemto_chain_contexts.length] = 'pseudo-list';
  else if bemto_chain_contexts[contextIndex-1] === 'pseudo-list' && newTag !== 'li'
    | </ul>
    - bemto_chain_contexts = bemto_chain_contexts.splice(0,bemto_chain_contexts.length-1);

  //- Setting context
  if ['a','abbr','acronym','b','br','code','em','font','i','img','ins','kbd','map','samp','small','span','strong','sub','sup','label','p','h1','h2','h3','h4','h5','h6'].indexOf(newTag) !== -1
    - bemto_chain_contexts[bemto_chain_contexts.length] = 'inline';
  else if ['ul','ol'].indexOf(newTag) !== -1
    - bemto_chain_contexts[bemto_chain_contexts.length] = 'list';
  else
    - bemto_chain_contexts[bemto_chain_contexts.length] = 'block';

  case newTag
    when 'a': a(attributes): block
    when 'abbr': abbr(attributes): block
    when 'address': address(attributes): block
    when 'article': article(attributes): block
    when 'aside': aside(attributes): block
    when 'b': b(attributes): block
    when 'blockquote': blockquote(attributes): block
    when 'body': body(attributes): block
    when 'button': button(attributes): block
    when 'caption': caption(attributes): block
    when 'cite': cite(attributes): block
    when 'code': code(attributes): block
    when 'dd': dd(attributes): block
    when 'del': del(attributes): block
    when 'dfn': dfn(attributes): block
    when 'dl': dl(attributes): block
    when 'dt': dt(attributes): block
    when 'em': em(attributes): block
    when 'fieldset': fieldset(attributes): block
    when 'footer': footer(attributes): block
    when 'form': form(attributes): block
    when 'h1': h1(attributes): block
    when 'h2': h2(attributes): block
    when 'h3': h3(attributes): block
    when 'h4': h4(attributes): block
    when 'h5': h5(attributes): block
    when 'h6': h6(attributes): block
    when 'header': header(attributes): block
    when 'i': i(attributes): block
    when 'ins': ins(attributes): block
    when 'kbd': kbd(attributes): block
    when 'label': label(attributes): block
    when 'legend': legend(attributes): block
    when 'li': li(attributes): block
    when 'mark': mark(attributes): block
    when 'nav': nav(attributes): block
    when 'ol': ol(attributes): block
    when 'p': p(attributes): block
    when 'pre': pre(attributes): block
    when 'q': q(attributes): block
    when 's': s(attributes): block
    when 'samp': samp(attributes): block
    when 'section': section(attributes): block
    when 'small': small(attributes): block
    when 'span': span(attributes): block
    when 'strong': strong(attributes): block
    when 'sub': sub(attributes): block
    when 'sup': sup(attributes): block
    when 'table': table(attributes): block
    when 'tbody': tbody(attributes): block
    when 'td': td(attributes): block
    when 'textarea': textarea(attributes): block
    when 'tfoot': tfoot(attributes): block
    when 'th': th(attributes): block
    when 'thead': thead(attributes): block
    when 'tr': tr(attributes): block
    when 'u ': u (attributes): block
    when 'ul': ul(attributes): block
    when 'var': var(attributes): block
    when 'hr': br(attributes)
    when 'br': br(attributes)
    when 'wbr': br(attributes)
    when 'img'
      //- If there is no title we don't need it to show even if there is some alt
      if attributes.alt && !attributes.title
        - attributes.title = ''
      //- If we have title, we must have it in alt if it's not set
      if attributes.title && !attributes.alt
        - attributes.alt = attributes.title
      img(alt='', attributes)
    when 'input': input(type='text', attributes)
    when 'html'
      !!! 5
      html(attributes): block
    default: div(attributes): block
    //- Use interpolation here for non-tweaked tags when #659 and #660 are fixed
    //-default: #{newTag}(attributes): block

  //- Closing all the wrapper tails
  if bemto_chain_contexts[contextIndex-1] === 'list' && newTag != 'li'
    | </li>

//- Some global variables
- var bemto_chain = []
- var bemto_chain_contexts = ['block']
- var bemto_regex_element =
//- Block
mixin b(tag, isElement)
  //- Rewriting the class for elements and modifiers
  if attributes.class
    - var bemto_classes = attributes.class
    - var bemto_block = bemto_classes[0].match(new RegExp('^(((?!' + bemto_settings_element + '|' + bemto_settings_modifier +').)+)'))[1]

    if !isElement
      - bemto_chain[bemto_chain.length] = bemto_block
      - bemto_classes[0] = bemto_classes[0]
    else
      - bemto_classes[0] = bemto_chain[bemto_chain.length-1] + bemto_settings_element + bemto_classes[0]

    - var current_block = (isElement ? bemto_chain[bemto_chain.length-1] + bemto_settings_element : '') + bemto_block

    //- Adding the block if there is only modifier and/or element
    if bemto_classes.indexOf(current_block) === -1
      - bemto_classes[bemto_classes.length] = current_block

    each klass, i in bemto_classes
      if klass.match(new RegExp('^(?!' + bemto_settings_element + ')' + bemto_settings_modifier))
        //- Expanding the modifiers
        - bemto_classes[i] = current_block + klass
      else if klass.match(new RegExp('^' + bemto_settings_element))
        //- Expanding the mixed in elements
        if bemto_chain[bemto_chain.length-2]
          - bemto_classes[i] = bemto_chain[bemto_chain.length-2] + klass
        else
          - bemto_classes[i] = bemto_chain[bemto_chain.length-1] + klass

      //- Adding prefixes
      if bemto_classes[i].match(new RegExp('^' + current_block + '($|(?=' + bemto_settings_element + '|' + bemto_settings_modifier + '))'))
        - bemto_classes[i] = bemto_settings_prefix + bemto_classes[i]

    //- Write modified classes to attributes in the correct order
    - attributes.class = bemto_classes.sort().join(' ')

  +bemto_tag(tag)(attributes)
    block

  //- Closing actions (remove the current block from the chain)
  if !isElement
    - bemto_chain = bemto_chain.splice(0,bemto_chain.length-1);
  - bemto_chain_contexts = bemto_chain_contexts.splice(0,bemto_chain_contexts.length-1);

//- Element
mixin e(tag)
  +b(tag, true)(attributes): block
